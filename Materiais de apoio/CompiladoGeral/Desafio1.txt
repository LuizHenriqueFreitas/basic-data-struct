---
## Análise Assintótica da Função `contemDuplicacao`

A função `contemDuplicacao` verifica se um array de inteiros contém elementos duplicados. Para determinar o tempo de execução dessa função usando o método analítico (análise assintótica), precisamos analisar o número de operações executadas em relação ao tamanho da entrada, `size`.

Vamos analisar os laços aninhados:

* **Laço externo:** `for (int i = 0; i < size; i++)`
    * Este laço é executado `size` vezes.

* **Laço interno:** `for (int j = i + 1; j < size; j++)`
    * O número de execuções deste laço depende do valor de `i`.
    * Quando $i = 0$, `j` vai de $1$ a $size - 1$, executando $size - 1$ vezes.
    * Quando $i = 1$, `j` vai de $2$ a $size - 1$, executando $size - 2$ vezes.
    * ...
    * Quando $i = size - 2$, `j` vai de $size - 1$ a $size - 1$, executando $1$ vez.
    * Quando $i = size - 1$, o laço interno não é executado nenhuma vez.

O número total de comparações (e outras operações dentro do laço interno, como incrementos e atribuições) é a soma das execuções do laço interno para cada valor de `i`:

$$(size - 1) + (size - 2) + \dots + 1 + 0$$

Esta é a soma de uma progressão aritmética que pode ser expressa pela fórmula:

$$\frac{(n)(n+1)}{2}$$

Substituindo $n$ por $size - 1$:

$$\frac{(size - 1)((size - 1) + 1)}{2} = \frac{(size - 1)(size)}{2} = \frac{size^2 - size}{2}$$

Portanto, o número de operações é aproximadamente $\frac{1}{2}size^2 - \frac{1}{2}size$.

### Função de Tempo de Execução

Ao considerarmos o tempo de execução em termos de **análise assintótica**, estamos interessados na **taxa de crescimento** dominante da função conforme o tamanho da entrada (`size`) se torna muito grande. Ignoramos as constantes e os termos de menor ordem.

A função que descreve o tempo de execução, $T(size)$, é:

$$T(size) = c_1 \cdot \frac{size^2 - size}{2} + c_2$$

Onde:
* $c_1$ representa o tempo gasto por cada operação de comparação e as operações dentro do laço interno.
* $c_2$ representa o tempo gasto por operações fora dos laços (como a inicialização da função e o `return false` final, caso nenhuma duplicação seja encontrada).

Simplificando e focando no termo de maior ordem para a análise assintótica:

$$T(size) \approx \frac{1}{2}size^2$$

---

### Notação Big O

Em termos da **notação Big O**, que descreve o limite superior do tempo de execução, a função `contemDuplicacao` tem um tempo de execução de:

$$\mathcal{O}(size^2)$$

Isso significa que o tempo de execução cresce quadraticamente com o tamanho da entrada. Mesmo no melhor caso (onde a duplicação é encontrada logo no início), a análise assintótica ainda se aplica ao comportamento geral do algoritmo para grandes entradas. No pior caso (quando não há duplicação ou a duplicação está no final), o algoritmo executa o número máximo de comparações, o que confirma a complexidade quadrática.